{"version":3,"sources":["Gallery.js","ButtonBar.js","App.js","reportWebVitals.js","index.js"],"names":["Gallery","props","style","src","objectImg","alt","title","ButtonBar","value","onClick","handleIterate","App","useState","data","setData","objectId","setObjectId","useEffect","document","fetch","then","response","json","resdata","className","primaryImage","e","Number","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4MAQeA,EARC,SAACC,GACb,OACI,qBAAKC,MAAO,CAAC,MAAS,QAAtB,SACI,qBAAKA,MAAO,CAAC,SAAY,SAAUC,IAAKF,EAAMG,UAAWC,IAAKJ,EAAMK,WCQjEC,EAXG,SAACN,GACf,OACI,gCACI,wBAAQO,OAAQ,EAAGC,QAASR,EAAMS,cAAlC,sBACA,wBAAQF,OAAQ,EAAGC,QAASR,EAAMS,cAAlC,kBACA,wBAAQF,MAAO,EAAGC,QAASR,EAAMS,cAAjC,kBACA,wBAAQF,MAAO,EAAGC,QAASR,EAAMS,cAAjC,0BCoCGC,MArCf,WAAgB,IAAD,EACSC,mBAAS,IADlB,mBACRC,EADQ,KACFC,EADE,OAEiBF,mBAAS,OAF1B,mBAERG,EAFQ,KAEEC,EAFF,KA0Bb,OAtBAC,qBAAU,WACRC,SAASZ,MAAM,sBACfa,MAAM,oEAAD,OAAqEJ,IACzEK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAO,OAAIT,EAAQS,QACxB,CAACR,IAkBF,sBAAKS,UAAU,MAAf,UACE,6BAAKX,EAAKP,QACV,qBAAKJ,MAAO,CAAC,MAAS,QAAtB,SAbEW,EAAKY,aAMP,cAAC,EAAD,CAASrB,UAAWS,EAAKY,aAAcnB,MAAOO,EAAKP,QAJjD,6CAcF,cAAC,EAAD,CAAWI,cArBO,SAACgB,GACrBV,EAAYD,EAAWY,OAAOD,EAAEE,OAAOpB,eCL5BqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrB,SAASsB,eAAe,SAM1BX,K","file":"static/js/main.09c4801b.chunk.js","sourcesContent":["const Gallery = (props) => {\n    return (\n        <div style={{'width': '100%'}}>\n            <img style={{'maxWidth': '100vw'}} src={props.objectImg} alt={props.title} />\n        </div>\n    )\n}\n\nexport default Gallery","const ButtonBar = (props) => {\n    return (\n        <div>\n            <button value={-5} onClick={props.handleIterate}>Way Back</button>\n            <button value={-1} onClick={props.handleIterate}>Back</button>\n            <button value={1} onClick={props.handleIterate}>Next</button>\n            <button value={5} onClick={props.handleIterate}>Big Next</button>\n        </div>\n    )\n}\n\nexport default ButtonBar","import { useState, useEffect } from 'react'\nimport './App.css';\nimport Gallery from './Gallery'\nimport ButtonBar from './ButtonBar'\n\nfunction App() {\n  let [data, setData] = useState({})\n  let [objectId, setObjectId] = useState(12770)\n\n  useEffect(() => {\n    document.title='Welcome to ArtWorld'\n    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${objectId}`)\n    .then(response => response.json())\n    .then(resdata => setData(resdata))\n  }, [objectId])\n\n  const handleIterate = (e) => {\n    setObjectId(objectId + Number(e.target.value))\n  }\n\n  const displayImage = () => {\n    if(!data.primaryImage) {\n      return (\n        <h2>No Image!</h2>\n      )\n    }\n    return (\n      <Gallery objectImg={data.primaryImage} title={data.title} />\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>{data.title}</h1>\n      <div style={{'width': '100%'}}>\n        {displayImage()}\n      </div>\n      <ButtonBar handleIterate={handleIterate} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}